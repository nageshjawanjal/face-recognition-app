{"ast":null,"code":"import { faceAPI } from './api';\n\n// Admin face encoding (you'll need to register your face first)\n// This should be stored securely in production\nconst ADMIN_FACE_ENCODING = null; // Will be set when admin registers\n\nclass AdminAuthService {\n  constructor() {\n    this.isAuthenticated = false;\n    this.adminFaceEncoding = localStorage.getItem('adminFaceEncoding');\n  }\n\n  // Register admin face (should be done once)\n  async registerAdminFace(imageFile) {\n    try {\n      const response = await faceAPI.detectFaces(imageFile);\n      if (response.success && response.face_count > 0) {\n        // Store admin face encoding\n        const encodingResponse = await faceAPI.encodeFace(imageFile);\n        if (encodingResponse.success) {\n          this.adminFaceEncoding = encodingResponse.face_encoding;\n          localStorage.setItem('adminFaceEncoding', JSON.stringify(this.adminFaceEncoding));\n          return {\n            success: true,\n            message: 'Admin face registered successfully'\n          };\n        }\n      }\n      return {\n        success: false,\n        message: 'No face detected or encoding failed'\n      };\n    } catch (error) {\n      console.log(\"error: \", error);\n      return {\n        success: false,\n        message: 'Failed to register admin face'\n      };\n    }\n  }\n\n  // Authenticate admin by face\n  async authenticateAdmin(imageFile) {\n    try {\n      if (!this.adminFaceEncoding) {\n        return {\n          success: false,\n          message: 'Admin face not registered. Please register first.'\n        };\n      }\n      const encodingResponse = await faceAPI.encodeFace(imageFile);\n      if (!encodingResponse.success) {\n        return {\n          success: false,\n          message: 'No face detected'\n        };\n      }\n\n      // Compare with admin face encoding\n      const adminEncoding = JSON.parse(this.adminFaceEncoding);\n      const similarity = this.compareFaces(adminEncoding, encodingResponse.face_encoding);\n      if (similarity > 0.6) {\n        // Threshold for admin authentication\n        this.isAuthenticated = true;\n        return {\n          success: true,\n          message: 'Admin authenticated successfully'\n        };\n      } else {\n        return {\n          success: false,\n          message: 'Access denied. Admin authentication failed.'\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Authentication failed'\n      };\n    }\n  }\n\n  // Simple face comparison (in production, use proper face comparison)\n  compareFaces(encoding1, encoding2) {\n    if (!encoding1 || !encoding2) return 0;\n\n    // Calculate cosine similarity\n    const dotProduct = encoding1.reduce((sum, val, i) => sum + val * encoding2[i], 0);\n    const magnitude1 = Math.sqrt(encoding1.reduce((sum, val) => sum + val * val, 0));\n    const magnitude2 = Math.sqrt(encoding2.reduce((sum, val) => sum + val * val, 0));\n    return dotProduct / (magnitude1 * magnitude2);\n  }\n\n  // Check if admin is authenticated\n  isAdminAuthenticated() {\n    return this.isAuthenticated;\n  }\n\n  // Logout admin\n  logout() {\n    this.isAuthenticated = false;\n  }\n\n  // Check if admin face is registered\n  isAdminRegistered() {\n    return !!this.adminFaceEncoding;\n  }\n}\nexport default new AdminAuthService();","map":{"version":3,"names":["faceAPI","ADMIN_FACE_ENCODING","AdminAuthService","constructor","isAuthenticated","adminFaceEncoding","localStorage","getItem","registerAdminFace","imageFile","response","detectFaces","success","face_count","encodingResponse","encodeFace","face_encoding","setItem","JSON","stringify","message","error","console","log","authenticateAdmin","adminEncoding","parse","similarity","compareFaces","encoding1","encoding2","dotProduct","reduce","sum","val","i","magnitude1","Math","sqrt","magnitude2","isAdminAuthenticated","logout","isAdminRegistered"],"sources":["/Users/gajanan/face-recognition-webapp/frontend/src/services/adminAuth.js"],"sourcesContent":["import { faceAPI } from './api';\n\n// Admin face encoding (you'll need to register your face first)\n// This should be stored securely in production\nconst ADMIN_FACE_ENCODING = null; // Will be set when admin registers\n\nclass AdminAuthService {\n  constructor() {\n    this.isAuthenticated = false;\n    this.adminFaceEncoding = localStorage.getItem('adminFaceEncoding');\n  }\n\n  // Register admin face (should be done once)\n  async registerAdminFace(imageFile) {\n    try {\n      const response = await faceAPI.detectFaces(imageFile);\n      if (response.success && response.face_count > 0) {\n        // Store admin face encoding\n        const encodingResponse = await faceAPI.encodeFace(imageFile);\n        if (encodingResponse.success) {\n          this.adminFaceEncoding = encodingResponse.face_encoding;\n          localStorage.setItem('adminFaceEncoding', JSON.stringify(this.adminFaceEncoding));\n          return { success: true, message: 'Admin face registered successfully' };\n        }\n      }\n      return { success: false, message: 'No face detected or encoding failed' };\n    } catch (error) {\n      console.log(\"error: \", error);\n      return { success: false, message: 'Failed to register admin face' };\n    }\n  }\n\n  // Authenticate admin by face\n  async authenticateAdmin(imageFile) {\n    try {\n      if (!this.adminFaceEncoding) {\n        return { success: false, message: 'Admin face not registered. Please register first.' };\n      }\n\n      const encodingResponse = await faceAPI.encodeFace(imageFile);\n      if (!encodingResponse.success) {\n        return { success: false, message: 'No face detected' };\n      }\n\n      // Compare with admin face encoding\n      const adminEncoding = JSON.parse(this.adminFaceEncoding);\n      const similarity = this.compareFaces(adminEncoding, encodingResponse.face_encoding);\n      \n      if (similarity > 0.6) { // Threshold for admin authentication\n        this.isAuthenticated = true;\n        return { success: true, message: 'Admin authenticated successfully' };\n      } else {\n        return { success: false, message: 'Access denied. Admin authentication failed.' };\n      }\n    } catch (error) {\n      return { success: false, message: 'Authentication failed' };\n    }\n  }\n\n  // Simple face comparison (in production, use proper face comparison)\n  compareFaces(encoding1, encoding2) {\n    if (!encoding1 || !encoding2) return 0;\n    \n    // Calculate cosine similarity\n    const dotProduct = encoding1.reduce((sum, val, i) => sum + val * encoding2[i], 0);\n    const magnitude1 = Math.sqrt(encoding1.reduce((sum, val) => sum + val * val, 0));\n    const magnitude2 = Math.sqrt(encoding2.reduce((sum, val) => sum + val * val, 0));\n    \n    return dotProduct / (magnitude1 * magnitude2);\n  }\n\n  // Check if admin is authenticated\n  isAdminAuthenticated() {\n    return this.isAuthenticated;\n  }\n\n  // Logout admin\n  logout() {\n    this.isAuthenticated = false;\n  }\n\n  // Check if admin face is registered\n  isAdminRegistered() {\n    return !!this.adminFaceEncoding;\n  }\n}\n\nexport default new AdminAuthService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}